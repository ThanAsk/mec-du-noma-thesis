function c = approxConstraint(x,x0)
%x = [z,r] z,r:vectors of times(z) and rates (r) for k = 1,...8
% c is given as a DC (difference of convex) function: c = g - h  and
% the concave part is Taylor-approximated around p0 = [z0,ei0,ej0]:
% c = g - h(p0) + gradh(p0).'*(p - p0) 
% 
z = x(1:8);
r = x(9:16);
z0 = x0(1:8);
r0 = x0(9:16);

gradk = @(k,z,r)exp(z(k)+r(k))/sum(exp(z+r));
gradh = arrayfun(@(k)gradk(k,z0,r0),1:8);

gradh = zeros(1,3);
gradh(1) = exp(z0)*log(exp(z0)+gi*exp(ei0)+gj*exp(ej0))+exp(z0)^2/(exp(z0)+gi*exp(ei0)+gj*exp(ej0));
gradh(2) = gi*exp(z0+ei0)/(exp(z0)+gi*exp(ei0)+gj*exp(ej0));
gradh(3) = gj*exp(z0+ej0)/(exp(z0)+gi*exp(ei0)+gj*exp(ej0));

taylor = exp(z0)*log(exp(z0)+gi*exp(ei0)+gj*exp(ej0)) + dot(gradh,(p-p0));
c = exp(z(k))*log(exp(z(k))+gj*exp(ej(k)))+r(k)*log(2) - taylor;

end